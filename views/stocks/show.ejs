<!-- Content starts here (no includes) -->
<div class="container py-5">
  <div class="flex justify-between items-center mb-5">
    <div>
      <h1 class="mb-1">
        <%= stock.name %>
      </h1>
      <p class="text-muted">
        <%= stock.id %> â€¢ <%= stock.sector %>
      </p>
    </div>
    <a href="/stocks" class="btn btn-outline">
      Back to Stocks
    </a>
  </div>

  <div class="grid grid-cols-3 gap-6">
    <!-- Stock Info Card -->
    <div class="card">
      <div class="card-header">
        <div class="flex justify-between items-start">
          <h3 class="card-title">Stock Information</h3>
          <div
            class="<%= typeof stock.change === 'number' && stock.change >= 0 ? 'text-success' : 'text-danger' %> flex items-center">
            <i
              class="fas fa-<%= typeof stock.change === 'number' && stock.change >= 0 ? 'arrow-up' : 'arrow-down' %> mr-1"></i>
            <span class="text-lg font-semibold">
              <%= typeof stock.change==='number' && stock.change>= 0 ? '+' : '' %><%= typeof
                  stock.change_percent==='number' ? stock.change_percent.toFixed(2) : '0.00' %>%
            </span>
          </div>
        </div>
      </div>
      <div class="card-content">
        <div class="flex flex-col justify-between">
          <div>
            <p class="text-3xl font-bold">$<%= typeof stock.price==='number' ? stock.price.toFixed(2) :
                parseFloat(stock.price || 0).toFixed(2) %>
            </p>
            <p
              class="<%= typeof stock.change === 'number' && stock.change >= 0 ? 'text-success' : 'text-danger' %> mb-4">
              <%= typeof stock.change==='number' && stock.change>= 0 ? '+' : '' %>$<%= typeof stock.change==='number' ?
                  Math.abs(stock.change).toFixed(2) : Math.abs(parseFloat(stock.change || 0)).toFixed(2) %> today
            </p>
          </div>
          <div class="grid grid-cols-2 gap-x-4 gap-y-3">
            <div>
              <p class="text-muted">Volume</p>
              <p class="font-medium">
                <%= stock.volume.toLocaleString() %>
              </p>
            </div>
            <div>
              <p class="text-muted">Market Cap</p>
              <p class="font-medium">$<%= (stock.market_cap / 1000000000).toFixed(2) %>B</p>
            </div>
            <div>
              <p class="text-muted">Sector</p>
              <p class="font-medium">
                <%= stock.sector %>
              </p>
            </div>
            <div>
              <p class="text-muted">Symbol</p>
              <p class="font-medium">
                <%= stock.id %>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Trade Card -->
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Trade <%= stock.id %>
        </h3>
        <p class="card-description">Current price: $<%= typeof stock.price==='number' ? stock.price.toFixed(2) :
            parseFloat(stock.price || 0).toFixed(2) %>
        </p>
      </div>
      <div class="card-content">
        <div class="tabs">
          <div class="tab active" data-tab="buy-tab">Buy</div>
          <div class="tab" data-tab="sell-tab">Sell</div>
        </div>

        <div id="buy-tab" class="tab-content active">
          <form action="/stocks/<%= stock.id %>/buy" method="POST">
            <div class="form-group">
              <label for="quantity" class="form-label">Quantity</label>
              <input type="number" id="quantity" name="quantity" class="form-control" min="1" value="1" required>
            </div>

            <div class="form-group">
              <label class="form-label">Estimated Cost</label>
              <p class="text-2xl font-bold" id="total-amount">$<%= typeof stock.price==='number' ?
                  stock.price.toFixed(2) : parseFloat(stock.price || 0).toFixed(2) %>
              </p>
              <span id="stock-price" data-price="<%= stock.price %>" class="hidden"></span>
            </div>

            <div class="mt-4">
              <p class="text-muted mb-3">Available Balance: $<%= user ? (typeof user.balance==='number' ?
                  user.balance.toFixed(2) : parseFloat(user.balance || 0).toFixed(2)) : '0.00' %>
              </p>

              <% if (user) { %>
                <button type="submit" class="btn btn-primary btn-block" <%=(user.balance && stock.price &&
                  parseFloat(user.balance) < parseFloat(stock.price)) ? 'disabled' : '' %>>
                  Buy Stock
                </button>
                <% if (user.balance && stock.price && parseFloat(user.balance) < parseFloat(stock.price)) { %>
                  <p class="text-danger mt-2 text-center">Insufficient funds</p>
                  <% } %>
                    <% } else { %>
                      <a href="/auth/login" class="btn btn-primary btn-block">Login to Trade</a>
                      <% } %>
            </div>
          </form>
        </div>

        <div id="sell-tab" class="tab-content">
          <form action="/stocks/<%= stock.id %>/sell" method="POST">
            <div class="form-group">
              <label for="sell-quantity" class="form-label">Quantity</label>
              <input type="number" id="sell-quantity" name="quantity" class="form-control" min="1" value="1" required>
            </div>

            <div class="form-group">
              <label class="form-label">Estimated Value</label>
              <p class="text-2xl font-bold" id="sell-total-amount">$<%= typeof stock.price==='number' ?
                  stock.price.toFixed(2) : parseFloat(stock.price || 0).toFixed(2) %>
              </p>
            </div>

            <div class="mt-4">
              <p class="text-muted mb-3">Shares Owned: <%= holding ? holding.quantity : 0 %>
              </p>

              <% if (user) { %>
                <button type="submit" class="btn btn-danger btn-block" <%=!holding || holding.quantity < 1 ? 'disabled'
                  : '' %>>
                  Sell Stock
                </button>
                <% if (!holding || holding.quantity < 1) { %>
                  <p class="text-danger mt-2 text-center">You don't own any shares</p>
                  <% } %>
                    <% } else { %>
                      <a href="/auth/login" class="btn btn-primary btn-block">Login to Trade</a>
                      <% } %>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Chart Card -->
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">
          <%= stock.id %> Price Chart
        </h3>
        <p class="card-description">30-day price history</p>
      </div>
      <div class="card-content">
        <div class="chart-container" style="position: relative; height: 350px;">
          <canvas id="stockChart"></canvas>

          <!-- Fallback SVG chart if Chart.js fails -->
          <div id="fallbackChart" style="display: none; height: 100%; width: 100%;">
            <svg width="100%" height="100%" viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
              <!-- Background -->
              <rect x="0" y="0" width="800" height="400" fill="#f8f9fa" />

              <!-- Grid lines -->
              <g stroke="#e9ecef" stroke-width="1">
                <line x1="0" y1="350" x2="800" y2="350" />
                <line x1="0" y1="250" x2="800" y2="250" />
                <line x1="0" y1="150" x2="800" y2="150" />
                <line x1="0" y1="50" x2="800" y2="50" />
              </g>

              <!-- Chart line -->
              <polyline
                fill="<%= typeof stock.change === 'number' && stock.change >= 0 ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)' %>"
                stroke="<%= typeof stock.change === 'number' && stock.change >= 0 ? 'rgb(34, 197, 94)' : 'rgb(239, 68, 68)' %>"
                stroke-width="3"
                points="50,300 100,280 150,320 200,310 250,290 300,270 350,250 400,260 450,220 500,200 550,180 600,210 650,190 700,170 750,150" />

              <!-- X-axis labels -->
              <g fill="#6c757d" font-size="12">
                <text x="50" y="370">Apr 1</text>
                <text x="200" y="370">Apr 15</text>
                <text x="350" y="370">May 1</text>
                <text x="500" y="370">May 15</text>
                <text x="650" y="370">May 30</text>
              </g>

              <!-- Y-axis labels -->
              <g fill="#6c757d" font-size="12">
                <text x="20" y="350">$<%= (parseFloat(stock.price || 0) * 0.9).toFixed(2) %></text>
                <text x="20" y="250">$<%= (parseFloat(stock.price || 0) * 0.95).toFixed(2) %></text>
                <text x="20" y="150">$<%= (parseFloat(stock.price || 0) * 1.0).toFixed(2) %></text>
                <text x="20" y="50">$<%= (parseFloat(stock.price || 0) * 1.05).toFixed(2) %></text>
              </g>
            </svg>
            <p class="text-center text-muted mt-3">
              <%= stock.id %> Price History (Fallback Chart)
            </p>
          </div>

          <!-- Ultra-simple HTML fallback chart as last resort -->
          <div id="htmlChart" style="display: none; height: 100%; width: 100%; padding: 20px;">
            <h4 class="text-center mb-3">
              <%= stock.id %> Price Trend
            </h4>

            <div class="html-chart">
              <% const chartClass=typeof stock.change==='number' && stock.change>= 0 ? 'positive' : 'negative'; %>
                <div class="chart-container">
                  <div class="bar bar-1 <%= chartClass %>"></div>
                  <div class="bar bar-2 <%= chartClass %>"></div>
                  <div class="bar bar-3 <%= chartClass %>"></div>
                  <div class="bar bar-4 <%= chartClass %>"></div>
                  <div class="bar bar-5 <%= chartClass %>"></div>
                  <div class="bar bar-6 <%= chartClass %>"></div>
                  <div class="bar bar-7 <%= chartClass %>"></div>
                  <div class="bar bar-8 <%= chartClass %>"></div>
                  <div class="bar bar-9 <%= chartClass %>"></div>
                  <div class="bar bar-10 <%= chartClass %>"></div>
                </div>

                <div class="chart-labels">
                  <span class="text-muted">30 days ago</span>
                  <span class="text-muted">Current: $<%= typeof stock.price==='number' ? stock.price.toFixed(2) :
                      parseFloat(stock.price || 0).toFixed(2) %></span>
                </div>
            </div>

            <style>
              .html-chart {
                width: 100%;
                height: 100%;
              }

              .chart-container {
                display: flex;
                align-items: flex-end;
                height: 250px;
                border-bottom: 1px solid #ddd;
                border-left: 1px solid #ddd;
              }

              .bar {
                flex: 1;
                margin: 0 2px;
                opacity: 0.7;
              }

              .bar.positive {
                background-color: rgb(34, 197, 94);
              }

              .bar.negative {
                background-color: rgb(239, 68, 68);
              }

              .bar-1 {
                height: 60%;
              }

              .bar-2 {
                height: 50%;
              }

              .bar-3 {
                height: 70%;
              }

              .bar-4 {
                height: 65%;
              }

              .bar-5 {
                height: 55%;
              }

              .bar-6 {
                height: 80%;
              }

              .bar-7 {
                height: 75%;
              }

              .bar-8 {
                height: 85%;
              }

              .bar-9 {
                height: 90%;
              }

              .bar-10 {
                height: 100%;
              }

              .chart-labels {
                display: flex;
                justify-content: space-between;
                margin-top: 10px;
              }
            </style>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Your Position -->
  <div class="card mt-6">
    <div class="card-header">
      <h3 class="card-title">Your Position</h3>
    </div>
    <div class="card-content">
      <% if (holding) { %>
        <div class="grid grid-cols-4 gap-6">
          <div>
            <p class="text-muted">Shares Owned</p>
            <p class="text-xl font-bold">
              <%= holding.quantity %>
            </p>
          </div>
          <div>
            <p class="text-muted">Average Cost</p>
            <p class="text-xl font-bold">$<%= typeof holding.avg_price==='number' ? holding.avg_price.toFixed(2) :
                parseFloat(holding.avg_price || 0).toFixed(2) %>
            </p>
          </div>
          <div>
            <p class="text-muted">Current Value</p>
            <p class="text-xl font-bold">$<%= ((typeof stock.price==='number' ? stock.price : parseFloat(stock.price ||
                0)) * (typeof holding.quantity==='number' ? holding.quantity : parseFloat(holding.quantity ||
                0))).toFixed(2) %>
            </p>
          </div>
          <div>
            <% const stockPrice=typeof stock.price==='number' ? stock.price : parseFloat(stock.price || 0); const
              holdingQuantity=typeof holding.quantity==='number' ? holding.quantity : parseFloat(holding.quantity || 0);
              const avgPrice=typeof holding.avg_price==='number' ? holding.avg_price : parseFloat(holding.avg_price ||
              0); const costBasis=avgPrice * holdingQuantity; const currentValue=stockPrice * holdingQuantity; const
              profit=currentValue - costBasis; const profitPercent=(profit / costBasis) * 100; %>
              <p class="text-muted">Profit/Loss</p>
              <p class="text-xl font-bold <%= profit >= 0 ? 'text-success' : 'text-danger' %>">
                <%= profit>= 0 ? '+' : '' %>$<%= profit.toFixed(2) %>
              </p>
              <p class="<%= profit >= 0 ? 'text-success' : 'text-danger' %>">
                <%= profit>= 0 ? '+' : '' %><%= profitPercent.toFixed(2) %>%
              </p>
          </div>
        </div>
        <% } else { %>
          <p class="text-center py-4 text-muted">You don't own any shares of <%= stock.id %> yet.</p>
          <% } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Buy/sell tabs
    const tabs = document.querySelectorAll('.tab');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const target = tab.getAttribute('data-tab');

        // Remove active class from all tabs and contents
        tabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(c => c.classList.remove('active'));

        // Add active class to clicked tab and corresponding content
        tab.classList.add('active');
        document.getElementById(target).classList.add('active');
      });
    });

    // Update total based on quantity
    const quantityInput = document.getElementById('quantity');
    const sellQuantityInput = document.getElementById('sell-quantity');
    const stockPriceElement = document.getElementById('stock-price');
    const stockPrice = parseFloat(stockPriceElement.dataset.price) || 0;
    const totalAmount = document.getElementById('total-amount');
    const sellTotalAmount = document.getElementById('sell-total-amount');

    function updateTotal() {
      const quantity = parseInt(quantityInput.value) || 1;
      const total = (quantity * stockPrice).toFixed(2);
      totalAmount.textContent = `$${total}`;
    }

    function updateSellTotal() {
      const quantity = parseInt(sellQuantityInput.value) || 1;
      const total = (quantity * stockPrice).toFixed(2);
      sellTotalAmount.textContent = `$${total}`;
    }

    quantityInput.addEventListener('input', updateTotal);
    sellQuantityInput.addEventListener('input', updateSellTotal);

    // Initialize chart with fallbacks
    tryRenderChart();
  });

  function tryRenderChart() {
    try {
      createStockChart();
    } catch (e) {
      console.error("Error initializing Chart.js:", e);
      try {
        // Try to display SVG fallback chart
        document.getElementById('fallbackChart').style.display = 'block';
        document.getElementById('stockChart').style.display = 'none';
      } catch (svgError) {
        console.error("Error displaying SVG fallback:", svgError);
        try {
          // Last resort: show basic HTML chart
          document.getElementById('htmlChart').style.display = 'block';
          document.getElementById('fallbackChart').style.display = 'none';
          document.getElementById('stockChart').style.display = 'none';
        } catch (htmlError) {
          console.error("All chart rendering methods failed:", htmlError);
        }
      }
    }
  }

  function createStockChart() {
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
      console.error('Chart.js is not loaded!');

      // Attempt to load Chart.js if not already loaded
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
      script.async = true;
      script.onload = function () {
        console.log('Chart.js loaded successfully, creating chart...');
        initializeChart();
      };
      script.onerror = function () {
        console.error('Failed to load Chart.js dynamically');
      };
      document.head.appendChild(script);
      return;
    }

    initializeChart();
  }

  function initializeChart() {
    const ctx = document.getElementById('stockChart');
    if (!ctx) {
      console.error('Cannot find canvas element with id "stockChart"');
      return;
    }

    const stockSymbol = '<%= stock.id %>';
    const isPositiveChange = '<%= typeof stock.change === "number" ? (stock.change >= 0 ? "true" : "false") : (parseFloat(stock.change || 0) >= 0 ? "true" : "false") %>' === 'true';

    // Static data for the chart - guaranteed to work
    const dates = ['Apr 1', 'Apr 5', 'Apr 10', 'Apr 15', 'Apr 20', 'Apr 25', 'Apr 30', 'May 5', 'May 10', 'May 15', 'May 20', 'May 25', 'May 30'];

    // Create fixed price data
    const basePrice = 175;
    const prices = [
      basePrice * 0.92,
      basePrice * 0.94,
      basePrice * 0.97,
      basePrice * 0.95,
      basePrice * 0.99,
      basePrice * 1.01,
      basePrice * 0.98,
      basePrice * 1.02,
      basePrice * 1.03,
      basePrice * 1.05,
      basePrice * 1.04,
      basePrice * 1.06,
      basePrice
    ];

    // Chart color based on positive/negative change
    const chartColor = isPositiveChange ? 'rgb(34, 197, 94)' : 'rgb(239, 68, 68)';
    const chartBgColor = isPositiveChange ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)';

    // Create chart
    try {
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: dates,
          datasets: [{
            label: `${stockSymbol} Price`,
            data: prices,
            borderColor: chartColor,
            backgroundColor: chartBgColor,
            fill: true,
            tension: 0.3,
            pointRadius: 0,
            borderWidth: 2,
            pointHoverRadius: 5
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function (context) {
                  return `$${context.parsed.y.toFixed(2)}`;
                }
              }
            },
            legend: {
              display: false
            }
          },
          scales: {
            x: {
              ticks: {
                maxTicksLimit: 7,
                font: {
                  size: 10
                }
              },
              grid: {
                display: false
              }
            },
            y: {
              ticks: {
                callback: function (value) {
                  return '$' + value.toFixed(2);
                }
              },
              grid: {
                color: 'rgba(0, 0, 0, 0.05)'
              }
            }
          }
        }
      });
      console.log('Chart created successfully');
    } catch (error) {
      console.error('Error creating chart:', error);
    }
  }
</script>
<!-- Content ends here (no includes) -->